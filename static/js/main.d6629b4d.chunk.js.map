{"version":3,"sources":["components/PostsInfo/PostsInfo.tsx","components/PostsList/PostsList.tsx","api/api.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["PostsInfo","post","selectedPost","selectedPostId","className","userId","body","id","type","onClick","PostsList","visiblePosts","map","BASE_URL1","BASE_URL2","NewCommentForm","resetComent","useState","nameValue","setNameValue","emailValue","setEmailValue","bodyValue","setBodyValue","onSubmit","event","postId","name","email","preventDefault","fetch","method","headers","JSON","stringify","then","res","ok","Error","status","statusText","json","placeholder","value","onChange","target","required","PostDetails","setSelectedPost","comments","setComments","setVisiblePosts","resetComment","setresetComment","useEffect","comment","undefined","length","commentId","App","posts","setPosts","selectValue","setSelectValue","setSelectedPostId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d6629b4d.chunk.js","sourcesContent":["import React from 'react';\nimport { Posts } from '../../types/types';\n\ninterface Props {\n  post: Posts\n  selectedPost: (postId: number) => void\n  selectedPostId: number\n}\n\nexport const PostsInfo: React.FC<Props>\n  = ({ post, selectedPost, selectedPostId }) => (\n    <li className=\"PostsList__item\">\n      <div>\n        <b>\n          [User #\n          {post.userId}\n          ]:\n          {' '}\n        </b>\n        {post.body}\n      </div>\n      {selectedPostId === post.id ? (\n        <button\n          type=\"button\"\n          className=\"PostsList__button button\"\n          onClick={() => selectedPost(-1)}\n        >\n          Close\n        </button>\n      ) : (\n        <button\n          type=\"button\"\n          className=\"PostsList__button button\"\n          onClick={() => selectedPost(post.id)}\n        >\n          Open\n        </button>\n      )}\n    </li>\n  );\n","import React from 'react';\nimport './PostsList.scss';\nimport { Posts } from '../../types/types';\nimport { PostsInfo } from '../PostsInfo/PostsInfo';\n\ninterface Props {\n  visiblePosts: Posts[]\n  selectedPost: (postId: number) => void\n  selectedPostId: number\n}\n\nexport const PostsList: React.FC<Props>\n  = ({ visiblePosts, selectedPost, selectedPostId }) => (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {visiblePosts.map(post => (\n          <PostsInfo\n            post={post}\n            key={post.id}\n            selectedPost={selectedPost}\n            selectedPostId={selectedPostId}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n","export const BASE_URL1 = 'https://mate.academy/students-api/posts';\nexport const BASE_URL2 = 'https://mate.academy/students-api/comments';\n\nexport const request = () => {\n  return fetch(BASE_URL1)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`${res.status} - ${res.statusText}`);\n      }\n\n      return res.json();\n    });\n};\n\nexport const getUserPosts = (userId: string) => {\n  return fetch(`${BASE_URL1}/${userId}`)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`${res.status} - ${res.statusText}`);\n      }\n\n      return res.json();\n    });\n};\n\nexport const getPostDetails = (postId: string) => {\n  return fetch(`${BASE_URL1}?userId=${postId}`)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`${res.status} - ${res.statusText}`);\n      }\n\n      return res.json();\n    });\n};\n\nexport const getPostComments = (postId: string) => {\n  return fetch(`${BASE_URL2}${postId}`)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`${res.status} - ${res.statusText}`);\n      }\n\n      return res.json();\n    });\n};\n\nexport const createComment\n  = (postId: number, name: string, email: string, body: string) => {\n    return fetch(BASE_URL2, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n      body: JSON.stringify({\n        postId,\n        name,\n        email,\n        body,\n      }),\n    })\n      .then(res => {\n        if (!res.ok) {\n          throw new Error(`${res.status} - ${res.statusText}`);\n        }\n\n        return res.json();\n      });\n  };\n\nexport const removeComment = (commentId: string) => {\n  return fetch(`${BASE_URL2}/${commentId}`, { method: 'DELETE' })\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`${res.status} - ${res.statusText}`);\n      }\n\n      return res.json();\n    });\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport { createComment } from '../../api/api';\nimport { Posts } from '../../types/types';\n\ninterface Props {\n  post: Posts,\n  resetComent: () => void\n}\n\nexport const NewCommentForm: React.FC<Props> = ({ post, resetComent }) => {\n  const [nameValue, setNameValue] = useState('');\n  const [emailValue, setEmailValue] = useState('');\n  const [bodyValue, setBodyValue] = useState('');\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        createComment(post.id, nameValue, emailValue, bodyValue);\n        resetComent();\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={nameValue}\n          onChange={(event) => setNameValue(event.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={emailValue}\n          onChange={(event) => setEmailValue(event.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={bodyValue}\n          onChange={(event) => setBodyValue(event.target.value)}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { Posts, Comments } from '../../types/types';\nimport { getPostComments, getUserPosts, removeComment } from '../../api/api';\n\ninterface Props {\n  selectedPostId: number\n}\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [selectedPost, setSelectedPost] = useState<Posts>();\n  const [comments, setComments] = useState<Comments[]>([]);\n  const [visiblePosts, setVisiblePosts] = useState(false);\n  const [resetComment, setresetComment] = useState(false);\n\n  useEffect(() => {\n    if (selectedPostId) {\n      getUserPosts(`${selectedPostId}`)\n        .then(post => {\n          setSelectedPost(post);\n        });\n      getPostComments(`?postId=${selectedPostId}`)\n        .then(comment => {\n          setComments(comment);\n        });\n    } else {\n      setSelectedPost(undefined);\n      setComments([]);\n    }\n  }, [selectedPostId, resetComment]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      {selectedPost && (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>{selectedPost.body}</p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            {comments.length !== 0 && (\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => setVisiblePosts(post => !post)}\n              >\n                {visiblePosts ? 'Hide' : 'Show'}\n                {' '}\n                {comments.length}\n                {' '}\n                comments\n              </button>\n            )}\n            {!visiblePosts && (\n              <ul className=\"PostDetails__list\">\n                {comments.map(comment => (\n                  <li className=\"PostDetails__list-item\" key={comment.id}>\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => {\n                        removeComment(`${comment.id}`);\n                        setresetComment(!resetComment);\n                      }}\n                    >\n                      X\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                post={selectedPost}\n                resetComent={() => setresetComment(!resetComment)}\n              />\n            </div>\n          </section>\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { request, getPostDetails } from './api/api';\nimport { Posts } from './types/types';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Posts[]>([]);\n  const [selectValue, setSelectValue] = useState('0');\n  const [selectedPostId, setSelectedPostId] = useState<number>(0);\n\n  useEffect(() => {\n    if (selectValue === '0') {\n      request()\n        .then(post => {\n          setPosts(post);\n        });\n    } else {\n      getPostDetails(`${selectValue}`)\n        .then(post => {\n          setPosts(post);\n        });\n    }\n  }, [selectValue]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectValue}\n            onChange={(event) => setSelectValue(event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            visiblePosts={posts}\n            selectedPost={(postId) => {\n              setSelectedPostId(postId);\n            }}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails selectedPostId={selectedPostId} />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}